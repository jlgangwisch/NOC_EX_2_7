// The Nature of Code
// Daniel Shiffman
// http://natureofcode.com

Mover[] movers = new Mover[10];
Liquid liquid;

float pNoise;

void setup() {
  size(1000, 1000);
  randomSeed(1);
  liquid = new Liquid(0, 0, width,height, 0.1);
  for (int i = 0; i < movers.length; i++) {
    movers[i] = new Mover(random(1, 4), random(width), random(0,800));
  }
  pNoise = 0.0;
}

void draw() {
  background(255);
  pNoise+=0.01;
  
  liquid.display();

  for (int i = 0; i < movers.length; i++) {
    //when wind blows, there is lift
    PVector wind = new PVector(map(noise(pNoise),0,1,-2,2), 0);
    PVector gravity = new PVector(0, 0.1*movers[i].mass);

    //float c = 0.05;
    //PVector friction = movers[i].velocity.get();
    //friction.mult(-1); 
    //friction.normalize();
    //friction.mult(c);

    //if (movers[i].isInside(liquid)){
      movers[i].drag(liquid);   
    //} else {movers[i].applyForce(friction);}

    
    movers[i].applyForce(wind);
    movers[i].applyForce(gravity);

    movers[i].update();
    movers[i].display();
    movers[i].checkEdges();
  }
}

class Liquid{
  float x,y,w,h;
  float c;
  
  Liquid (float x_, float y_, float w_, float h_, float c_) {
    x = x_;
    y = y_;
    w = w_;
    h = h_;
    c = c_;
  }
 

  void display(){
    noStroke();
    fill(217);
    rect(x,y,w,h);
  }

}

// The Nature of Code
// Daniel Shiffman
// http://natureofcode.com

class Mover {

  PVector position;
  PVector velocity;
  PVector acceleration;
  float mass;

  Mover(float m, float x , float y) {
    mass = m;
    position = new PVector(x,y);
    velocity = new PVector(0,0);
    acceleration = new PVector(0,0);
  }
  
  void applyForce(PVector force) {
    PVector f = PVector.div(force,mass);
    acceleration.add(f);
  }
  
  void update() {
    velocity.add(acceleration);
    position.add(velocity);
    acceleration.mult(0);
  }

  void display() {
    stroke(0);
    strokeWeight(2);
    fill(0,127);
    ellipse(position.x,position.y,mass*16,mass*8);
  }
  
  boolean isInside (Liquid l){
    if(position.x>l.x && position.x<l.x + l.w &&  position.y > l.y && position.y < l.y + l.h){
    return true;
    } else { return false;}
  }

  void drag(Liquid l){
    float speed = velocity.mag();
    float dragMag = l.c * speed * speed;
    
    PVector drag = velocity.copy();
    drag.mult(-1);
    drag.normalize();
    drag.mult(dragMag);
    applyForce(drag);
    
 PVector lift = drag.copy();
  lift.rotate(HALF_PI);
  lift.normalize();
  lift.mult(dragMag);
  applyForce(lift);
  }
  


  void checkEdges() {

    if (position.x > width) {
      position.x = 0;
      //velocity.x *= -1;
    } else if (position.x < 0) {
      position.x = width;
      //velocity.x *= -1;
    }

    if (position.y > height) {
      //velocity.y *= -1;
      position.y = 0;
    }
     if (position.y <0) {
      //velocity.y *= -1;
      position.y = height;
    }

  }

}

